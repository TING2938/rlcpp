// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gymEnv.proto

#include "gymEnv.pb.h"
#include "gymEnv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gymEnv {

static const char* GymService_method_names[] = {
  "/gymEnv.GymService/make",
  "/gymEnv.GymService/reset",
  "/gymEnv.GymService/step",
  "/gymEnv.GymService/render",
  "/gymEnv.GymService/close",
};

std::unique_ptr< GymService::Stub> GymService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GymService::Stub> stub(new GymService::Stub(channel, options));
  return stub;
}

GymService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_make_(GymService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reset_(GymService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_step_(GymService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_render_(GymService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_close_(GymService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GymService::Stub::make(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::EnvSpace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gymEnv::Msg, ::gymEnv::EnvSpace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make_, context, request, response);
}

void GymService::Stub::async::make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gymEnv::Msg, ::gymEnv::EnvSpace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, std::move(f));
}

void GymService::Stub::async::make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>* GymService::Stub::PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gymEnv::EnvSpace, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>* GymService::Stub::AsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::reset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Observation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gymEnv::Msg, ::gymEnv::Observation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reset_, context, request, response);
}

void GymService::Stub::async::reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gymEnv::Msg, ::gymEnv::Observation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, std::move(f));
}

void GymService::Stub::async::reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>* GymService::Stub::PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gymEnv::Observation, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>* GymService::Stub::AsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::step(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::gymEnv::StepResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gymEnv::Action, ::gymEnv::StepResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_step_, context, request, response);
}

void GymService::Stub::async::step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gymEnv::Action, ::gymEnv::StepResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_, context, request, response, std::move(f));
}

void GymService::Stub::async::step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>* GymService::Stub::PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gymEnv::StepResult, ::gymEnv::Action, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_step_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>* GymService::Stub::AsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::render(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_render_, context, request, response);
}

void GymService::Stub::async::render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_render_, context, request, response, std::move(f));
}

void GymService::Stub::async::render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_render_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* GymService::Stub::PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_render_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* GymService::Stub::AsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::close(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_close_, context, request, response);
}

void GymService::Stub::async::close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_close_, context, request, response, std::move(f));
}

void GymService::Stub::async::close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_close_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* GymService::Stub::PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_close_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* GymService::Stub::AsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

GymService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::gymEnv::Msg, ::gymEnv::EnvSpace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gymEnv::Msg* req,
             ::gymEnv::EnvSpace* resp) {
               return service->make(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::gymEnv::Msg, ::gymEnv::Observation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gymEnv::Msg* req,
             ::gymEnv::Observation* resp) {
               return service->reset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::gymEnv::Action, ::gymEnv::StepResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gymEnv::Action* req,
             ::gymEnv::StepResult* resp) {
               return service->step(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gymEnv::Msg* req,
             ::gymEnv::Msg* resp) {
               return service->render(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::gymEnv::Msg, ::gymEnv::Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gymEnv::Msg* req,
             ::gymEnv::Msg* resp) {
               return service->close(ctx, req, resp);
             }, this)));
}

GymService::Service::~Service() {
}

::grpc::Status GymService::Service::make(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::reset(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::step(::grpc::ServerContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::render(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::close(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gymEnv

