// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gymEnv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gymEnv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gymEnv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gymEnv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gymEnv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gymEnv_2eproto;
namespace gymEnv {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class EnvSpace;
struct EnvSpaceDefaultTypeInternal;
extern EnvSpaceDefaultTypeInternal _EnvSpace_default_instance_;
class Msg;
struct MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class Observation;
struct ObservationDefaultTypeInternal;
extern ObservationDefaultTypeInternal _Observation_default_instance_;
class Space;
struct SpaceDefaultTypeInternal;
extern SpaceDefaultTypeInternal _Space_default_instance_;
class StepResult;
struct StepResultDefaultTypeInternal;
extern StepResultDefaultTypeInternal _StepResult_default_instance_;
}  // namespace gymEnv
PROTOBUF_NAMESPACE_OPEN
template<> ::gymEnv::Action* Arena::CreateMaybeMessage<::gymEnv::Action>(Arena*);
template<> ::gymEnv::EnvSpace* Arena::CreateMaybeMessage<::gymEnv::EnvSpace>(Arena*);
template<> ::gymEnv::Msg* Arena::CreateMaybeMessage<::gymEnv::Msg>(Arena*);
template<> ::gymEnv::Observation* Arena::CreateMaybeMessage<::gymEnv::Observation>(Arena*);
template<> ::gymEnv::Space* Arena::CreateMaybeMessage<::gymEnv::Space>(Arena*);
template<> ::gymEnv::StepResult* Arena::CreateMaybeMessage<::gymEnv::StepResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gymEnv {

// ===================================================================

class Space final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.Space) */ {
 public:
  inline Space() : Space(nullptr) {}
  ~Space() override;
  explicit constexpr Space(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Space(const Space& from);
  Space(Space&& from) noexcept
    : Space() {
    *this = ::std::move(from);
  }

  inline Space& operator=(const Space& from) {
    CopyFrom(from);
    return *this;
  }
  inline Space& operator=(Space&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Space& default_instance() {
    return *internal_default_instance();
  }
  static inline const Space* internal_default_instance() {
    return reinterpret_cast<const Space*>(
               &_Space_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Space& a, Space& b) {
    a.Swap(&b);
  }
  inline void Swap(Space* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Space* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Space* New() const final {
    return new Space();
  }

  Space* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Space>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Space& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Space& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Space* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.Space";
  }
  protected:
  explicit Space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kNFieldNumber = 1,
    kBDiscreteFieldNumber = 5,
  };
  // repeated int32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // repeated float high = 3;
  int high_size() const;
  private:
  int _internal_high_size() const;
  public:
  void clear_high();
  private:
  float _internal_high(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_high() const;
  void _internal_add_high(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_high();
  public:
  float high(int index) const;
  void set_high(int index, float value);
  void add_high(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      high() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_high();

  // repeated float low = 4;
  int low_size() const;
  private:
  int _internal_low_size() const;
  public:
  void clear_low();
  private:
  float _internal_low(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_low() const;
  void _internal_add_low(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_low();
  public:
  float low(int index) const;
  void set_low(int index, float value);
  void add_low(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      low() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_low();

  // int32 n = 1;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bDiscrete = 5;
  void clear_bdiscrete();
  bool bdiscrete() const;
  void set_bdiscrete(bool value);
  private:
  bool _internal_bdiscrete() const;
  void _internal_set_bdiscrete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gymEnv.Space)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > high_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > low_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  bool bdiscrete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// -------------------------------------------------------------------

class EnvSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.EnvSpace) */ {
 public:
  inline EnvSpace() : EnvSpace(nullptr) {}
  ~EnvSpace() override;
  explicit constexpr EnvSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvSpace(const EnvSpace& from);
  EnvSpace(EnvSpace&& from) noexcept
    : EnvSpace() {
    *this = ::std::move(from);
  }

  inline EnvSpace& operator=(const EnvSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvSpace& operator=(EnvSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvSpace* internal_default_instance() {
    return reinterpret_cast<const EnvSpace*>(
               &_EnvSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnvSpace& a, EnvSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvSpace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvSpace* New() const final {
    return new EnvSpace();
  }

  EnvSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnvSpace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.EnvSpace";
  }
  protected:
  explicit EnvSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionSpaceFieldNumber = 1,
    kObsSpaceFieldNumber = 2,
    kMaxEpisodeStepsFieldNumber = 3,
  };
  // .gymEnv.Space action_space = 1;
  bool has_action_space() const;
  private:
  bool _internal_has_action_space() const;
  public:
  void clear_action_space();
  const ::gymEnv::Space& action_space() const;
  PROTOBUF_MUST_USE_RESULT ::gymEnv::Space* release_action_space();
  ::gymEnv::Space* mutable_action_space();
  void set_allocated_action_space(::gymEnv::Space* action_space);
  private:
  const ::gymEnv::Space& _internal_action_space() const;
  ::gymEnv::Space* _internal_mutable_action_space();
  public:
  void unsafe_arena_set_allocated_action_space(
      ::gymEnv::Space* action_space);
  ::gymEnv::Space* unsafe_arena_release_action_space();

  // .gymEnv.Space obs_space = 2;
  bool has_obs_space() const;
  private:
  bool _internal_has_obs_space() const;
  public:
  void clear_obs_space();
  const ::gymEnv::Space& obs_space() const;
  PROTOBUF_MUST_USE_RESULT ::gymEnv::Space* release_obs_space();
  ::gymEnv::Space* mutable_obs_space();
  void set_allocated_obs_space(::gymEnv::Space* obs_space);
  private:
  const ::gymEnv::Space& _internal_obs_space() const;
  ::gymEnv::Space* _internal_mutable_obs_space();
  public:
  void unsafe_arena_set_allocated_obs_space(
      ::gymEnv::Space* obs_space);
  ::gymEnv::Space* unsafe_arena_release_obs_space();

  // int64 max_episode_steps = 3;
  void clear_max_episode_steps();
  ::PROTOBUF_NAMESPACE_ID::int64 max_episode_steps() const;
  void set_max_episode_steps(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_episode_steps() const;
  void _internal_set_max_episode_steps(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:gymEnv.EnvSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gymEnv::Space* action_space_;
  ::gymEnv::Space* obs_space_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_episode_steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// -------------------------------------------------------------------

class Observation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.Observation) */ {
 public:
  inline Observation() : Observation(nullptr) {}
  ~Observation() override;
  explicit constexpr Observation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Observation(const Observation& from);
  Observation(Observation&& from) noexcept
    : Observation() {
    *this = ::std::move(from);
  }

  inline Observation& operator=(const Observation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Observation& operator=(Observation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Observation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Observation* internal_default_instance() {
    return reinterpret_cast<const Observation*>(
               &_Observation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Observation& a, Observation& b) {
    a.Swap(&b);
  }
  inline void Swap(Observation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Observation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Observation* New() const final {
    return new Observation();
  }

  Observation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Observation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Observation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Observation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.Observation";
  }
  protected:
  explicit Observation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsFieldNumber = 1,
  };
  // repeated float obs = 1;
  int obs_size() const;
  private:
  int _internal_obs_size() const;
  public:
  void clear_obs();
  private:
  float _internal_obs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_obs() const;
  void _internal_add_obs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_obs();
  public:
  float obs(int index) const;
  void set_obs(int index, float value);
  void add_obs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      obs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_obs();

  // @@protoc_insertion_point(class_scope:gymEnv.Observation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > obs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return new Action();
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // repeated float action = 1;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  private:
  float _internal_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_action() const;
  void _internal_add_action(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_action();
  public:
  float action(int index) const;
  void set_action(int index, float value);
  void add_action(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_action();

  // @@protoc_insertion_point(class_scope:gymEnv.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// -------------------------------------------------------------------

class StepResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.StepResult) */ {
 public:
  inline StepResult() : StepResult(nullptr) {}
  ~StepResult() override;
  explicit constexpr StepResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepResult(const StepResult& from);
  StepResult(StepResult&& from) noexcept
    : StepResult() {
    *this = ::std::move(from);
  }

  inline StepResult& operator=(const StepResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepResult& operator=(StepResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepResult* internal_default_instance() {
    return reinterpret_cast<const StepResult*>(
               &_StepResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StepResult& a, StepResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StepResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepResult* New() const final {
    return new StepResult();
  }

  StepResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StepResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.StepResult";
  }
  protected:
  explicit StepResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextObsFieldNumber = 1,
    kRewardFieldNumber = 2,
    kDoneFieldNumber = 3,
  };
  // .gymEnv.Observation next_obs = 1;
  bool has_next_obs() const;
  private:
  bool _internal_has_next_obs() const;
  public:
  void clear_next_obs();
  const ::gymEnv::Observation& next_obs() const;
  PROTOBUF_MUST_USE_RESULT ::gymEnv::Observation* release_next_obs();
  ::gymEnv::Observation* mutable_next_obs();
  void set_allocated_next_obs(::gymEnv::Observation* next_obs);
  private:
  const ::gymEnv::Observation& _internal_next_obs() const;
  ::gymEnv::Observation* _internal_mutable_next_obs();
  public:
  void unsafe_arena_set_allocated_next_obs(
      ::gymEnv::Observation* next_obs);
  ::gymEnv::Observation* unsafe_arena_release_next_obs();

  // float reward = 2;
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // bool done = 3;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gymEnv.StepResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gymEnv::Observation* next_obs_;
  float reward_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// -------------------------------------------------------------------

class Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gymEnv.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  ~Msg() override;
  explicit constexpr Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return new Msg();
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gymEnv.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:gymEnv.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymEnv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Space

// int32 n = 1;
inline void Space::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::n() const {
  // @@protoc_insertion_point(field_get:gymEnv.Space.n)
  return _internal_n();
}
inline void Space::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void Space::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:gymEnv.Space.n)
}

// repeated int32 shape = 2;
inline int Space::_internal_shape_size() const {
  return shape_.size();
}
inline int Space::shape_size() const {
  return _internal_shape_size();
}
inline void Space::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::shape(int index) const {
  // @@protoc_insertion_point(field_get:gymEnv.Space.shape)
  return _internal_shape(index);
}
inline void Space::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymEnv.Space.shape)
}
inline void Space::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void Space::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:gymEnv.Space.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Space::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Space::shape() const {
  // @@protoc_insertion_point(field_list:gymEnv.Space.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Space::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Space::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:gymEnv.Space.shape)
  return _internal_mutable_shape();
}

// repeated float high = 3;
inline int Space::_internal_high_size() const {
  return high_.size();
}
inline int Space::high_size() const {
  return _internal_high_size();
}
inline void Space::clear_high() {
  high_.Clear();
}
inline float Space::_internal_high(int index) const {
  return high_.Get(index);
}
inline float Space::high(int index) const {
  // @@protoc_insertion_point(field_get:gymEnv.Space.high)
  return _internal_high(index);
}
inline void Space::set_high(int index, float value) {
  high_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymEnv.Space.high)
}
inline void Space::_internal_add_high(float value) {
  high_.Add(value);
}
inline void Space::add_high(float value) {
  _internal_add_high(value);
  // @@protoc_insertion_point(field_add:gymEnv.Space.high)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Space::_internal_high() const {
  return high_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Space::high() const {
  // @@protoc_insertion_point(field_list:gymEnv.Space.high)
  return _internal_high();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Space::_internal_mutable_high() {
  return &high_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Space::mutable_high() {
  // @@protoc_insertion_point(field_mutable_list:gymEnv.Space.high)
  return _internal_mutable_high();
}

// repeated float low = 4;
inline int Space::_internal_low_size() const {
  return low_.size();
}
inline int Space::low_size() const {
  return _internal_low_size();
}
inline void Space::clear_low() {
  low_.Clear();
}
inline float Space::_internal_low(int index) const {
  return low_.Get(index);
}
inline float Space::low(int index) const {
  // @@protoc_insertion_point(field_get:gymEnv.Space.low)
  return _internal_low(index);
}
inline void Space::set_low(int index, float value) {
  low_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymEnv.Space.low)
}
inline void Space::_internal_add_low(float value) {
  low_.Add(value);
}
inline void Space::add_low(float value) {
  _internal_add_low(value);
  // @@protoc_insertion_point(field_add:gymEnv.Space.low)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Space::_internal_low() const {
  return low_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Space::low() const {
  // @@protoc_insertion_point(field_list:gymEnv.Space.low)
  return _internal_low();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Space::_internal_mutable_low() {
  return &low_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Space::mutable_low() {
  // @@protoc_insertion_point(field_mutable_list:gymEnv.Space.low)
  return _internal_mutable_low();
}

// bool bDiscrete = 5;
inline void Space::clear_bdiscrete() {
  bdiscrete_ = false;
}
inline bool Space::_internal_bdiscrete() const {
  return bdiscrete_;
}
inline bool Space::bdiscrete() const {
  // @@protoc_insertion_point(field_get:gymEnv.Space.bDiscrete)
  return _internal_bdiscrete();
}
inline void Space::_internal_set_bdiscrete(bool value) {
  
  bdiscrete_ = value;
}
inline void Space::set_bdiscrete(bool value) {
  _internal_set_bdiscrete(value);
  // @@protoc_insertion_point(field_set:gymEnv.Space.bDiscrete)
}

// -------------------------------------------------------------------

// EnvSpace

// .gymEnv.Space action_space = 1;
inline bool EnvSpace::_internal_has_action_space() const {
  return this != internal_default_instance() && action_space_ != nullptr;
}
inline bool EnvSpace::has_action_space() const {
  return _internal_has_action_space();
}
inline void EnvSpace::clear_action_space() {
  if (GetArenaForAllocation() == nullptr && action_space_ != nullptr) {
    delete action_space_;
  }
  action_space_ = nullptr;
}
inline const ::gymEnv::Space& EnvSpace::_internal_action_space() const {
  const ::gymEnv::Space* p = action_space_;
  return p != nullptr ? *p : reinterpret_cast<const ::gymEnv::Space&>(
      ::gymEnv::_Space_default_instance_);
}
inline const ::gymEnv::Space& EnvSpace::action_space() const {
  // @@protoc_insertion_point(field_get:gymEnv.EnvSpace.action_space)
  return _internal_action_space();
}
inline void EnvSpace::unsafe_arena_set_allocated_action_space(
    ::gymEnv::Space* action_space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_space_);
  }
  action_space_ = action_space;
  if (action_space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gymEnv.EnvSpace.action_space)
}
inline ::gymEnv::Space* EnvSpace::release_action_space() {
  
  ::gymEnv::Space* temp = action_space_;
  action_space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gymEnv::Space* EnvSpace::unsafe_arena_release_action_space() {
  // @@protoc_insertion_point(field_release:gymEnv.EnvSpace.action_space)
  
  ::gymEnv::Space* temp = action_space_;
  action_space_ = nullptr;
  return temp;
}
inline ::gymEnv::Space* EnvSpace::_internal_mutable_action_space() {
  
  if (action_space_ == nullptr) {
    auto* p = CreateMaybeMessage<::gymEnv::Space>(GetArenaForAllocation());
    action_space_ = p;
  }
  return action_space_;
}
inline ::gymEnv::Space* EnvSpace::mutable_action_space() {
  ::gymEnv::Space* _msg = _internal_mutable_action_space();
  // @@protoc_insertion_point(field_mutable:gymEnv.EnvSpace.action_space)
  return _msg;
}
inline void EnvSpace::set_allocated_action_space(::gymEnv::Space* action_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_space_;
  }
  if (action_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gymEnv::Space>::GetOwningArena(action_space);
    if (message_arena != submessage_arena) {
      action_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_space, submessage_arena);
    }
    
  } else {
    
  }
  action_space_ = action_space;
  // @@protoc_insertion_point(field_set_allocated:gymEnv.EnvSpace.action_space)
}

// .gymEnv.Space obs_space = 2;
inline bool EnvSpace::_internal_has_obs_space() const {
  return this != internal_default_instance() && obs_space_ != nullptr;
}
inline bool EnvSpace::has_obs_space() const {
  return _internal_has_obs_space();
}
inline void EnvSpace::clear_obs_space() {
  if (GetArenaForAllocation() == nullptr && obs_space_ != nullptr) {
    delete obs_space_;
  }
  obs_space_ = nullptr;
}
inline const ::gymEnv::Space& EnvSpace::_internal_obs_space() const {
  const ::gymEnv::Space* p = obs_space_;
  return p != nullptr ? *p : reinterpret_cast<const ::gymEnv::Space&>(
      ::gymEnv::_Space_default_instance_);
}
inline const ::gymEnv::Space& EnvSpace::obs_space() const {
  // @@protoc_insertion_point(field_get:gymEnv.EnvSpace.obs_space)
  return _internal_obs_space();
}
inline void EnvSpace::unsafe_arena_set_allocated_obs_space(
    ::gymEnv::Space* obs_space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obs_space_);
  }
  obs_space_ = obs_space;
  if (obs_space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gymEnv.EnvSpace.obs_space)
}
inline ::gymEnv::Space* EnvSpace::release_obs_space() {
  
  ::gymEnv::Space* temp = obs_space_;
  obs_space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gymEnv::Space* EnvSpace::unsafe_arena_release_obs_space() {
  // @@protoc_insertion_point(field_release:gymEnv.EnvSpace.obs_space)
  
  ::gymEnv::Space* temp = obs_space_;
  obs_space_ = nullptr;
  return temp;
}
inline ::gymEnv::Space* EnvSpace::_internal_mutable_obs_space() {
  
  if (obs_space_ == nullptr) {
    auto* p = CreateMaybeMessage<::gymEnv::Space>(GetArenaForAllocation());
    obs_space_ = p;
  }
  return obs_space_;
}
inline ::gymEnv::Space* EnvSpace::mutable_obs_space() {
  ::gymEnv::Space* _msg = _internal_mutable_obs_space();
  // @@protoc_insertion_point(field_mutable:gymEnv.EnvSpace.obs_space)
  return _msg;
}
inline void EnvSpace::set_allocated_obs_space(::gymEnv::Space* obs_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obs_space_;
  }
  if (obs_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gymEnv::Space>::GetOwningArena(obs_space);
    if (message_arena != submessage_arena) {
      obs_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_space, submessage_arena);
    }
    
  } else {
    
  }
  obs_space_ = obs_space;
  // @@protoc_insertion_point(field_set_allocated:gymEnv.EnvSpace.obs_space)
}

// int64 max_episode_steps = 3;
inline void EnvSpace::clear_max_episode_steps() {
  max_episode_steps_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EnvSpace::_internal_max_episode_steps() const {
  return max_episode_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EnvSpace::max_episode_steps() const {
  // @@protoc_insertion_point(field_get:gymEnv.EnvSpace.max_episode_steps)
  return _internal_max_episode_steps();
}
inline void EnvSpace::_internal_set_max_episode_steps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_episode_steps_ = value;
}
inline void EnvSpace::set_max_episode_steps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_episode_steps(value);
  // @@protoc_insertion_point(field_set:gymEnv.EnvSpace.max_episode_steps)
}

// -------------------------------------------------------------------

// Observation

// repeated float obs = 1;
inline int Observation::_internal_obs_size() const {
  return obs_.size();
}
inline int Observation::obs_size() const {
  return _internal_obs_size();
}
inline void Observation::clear_obs() {
  obs_.Clear();
}
inline float Observation::_internal_obs(int index) const {
  return obs_.Get(index);
}
inline float Observation::obs(int index) const {
  // @@protoc_insertion_point(field_get:gymEnv.Observation.obs)
  return _internal_obs(index);
}
inline void Observation::set_obs(int index, float value) {
  obs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymEnv.Observation.obs)
}
inline void Observation::_internal_add_obs(float value) {
  obs_.Add(value);
}
inline void Observation::add_obs(float value) {
  _internal_add_obs(value);
  // @@protoc_insertion_point(field_add:gymEnv.Observation.obs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Observation::_internal_obs() const {
  return obs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Observation::obs() const {
  // @@protoc_insertion_point(field_list:gymEnv.Observation.obs)
  return _internal_obs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Observation::_internal_mutable_obs() {
  return &obs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Observation::mutable_obs() {
  // @@protoc_insertion_point(field_mutable_list:gymEnv.Observation.obs)
  return _internal_mutable_obs();
}

// -------------------------------------------------------------------

// Action

// repeated float action = 1;
inline int Action::_internal_action_size() const {
  return action_.size();
}
inline int Action::action_size() const {
  return _internal_action_size();
}
inline void Action::clear_action() {
  action_.Clear();
}
inline float Action::_internal_action(int index) const {
  return action_.Get(index);
}
inline float Action::action(int index) const {
  // @@protoc_insertion_point(field_get:gymEnv.Action.action)
  return _internal_action(index);
}
inline void Action::set_action(int index, float value) {
  action_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymEnv.Action.action)
}
inline void Action::_internal_add_action(float value) {
  action_.Add(value);
}
inline void Action::add_action(float value) {
  _internal_add_action(value);
  // @@protoc_insertion_point(field_add:gymEnv.Action.action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Action::_internal_action() const {
  return action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Action::action() const {
  // @@protoc_insertion_point(field_list:gymEnv.Action.action)
  return _internal_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Action::_internal_mutable_action() {
  return &action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Action::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:gymEnv.Action.action)
  return _internal_mutable_action();
}

// -------------------------------------------------------------------

// StepResult

// .gymEnv.Observation next_obs = 1;
inline bool StepResult::_internal_has_next_obs() const {
  return this != internal_default_instance() && next_obs_ != nullptr;
}
inline bool StepResult::has_next_obs() const {
  return _internal_has_next_obs();
}
inline void StepResult::clear_next_obs() {
  if (GetArenaForAllocation() == nullptr && next_obs_ != nullptr) {
    delete next_obs_;
  }
  next_obs_ = nullptr;
}
inline const ::gymEnv::Observation& StepResult::_internal_next_obs() const {
  const ::gymEnv::Observation* p = next_obs_;
  return p != nullptr ? *p : reinterpret_cast<const ::gymEnv::Observation&>(
      ::gymEnv::_Observation_default_instance_);
}
inline const ::gymEnv::Observation& StepResult::next_obs() const {
  // @@protoc_insertion_point(field_get:gymEnv.StepResult.next_obs)
  return _internal_next_obs();
}
inline void StepResult::unsafe_arena_set_allocated_next_obs(
    ::gymEnv::Observation* next_obs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_obs_);
  }
  next_obs_ = next_obs;
  if (next_obs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gymEnv.StepResult.next_obs)
}
inline ::gymEnv::Observation* StepResult::release_next_obs() {
  
  ::gymEnv::Observation* temp = next_obs_;
  next_obs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gymEnv::Observation* StepResult::unsafe_arena_release_next_obs() {
  // @@protoc_insertion_point(field_release:gymEnv.StepResult.next_obs)
  
  ::gymEnv::Observation* temp = next_obs_;
  next_obs_ = nullptr;
  return temp;
}
inline ::gymEnv::Observation* StepResult::_internal_mutable_next_obs() {
  
  if (next_obs_ == nullptr) {
    auto* p = CreateMaybeMessage<::gymEnv::Observation>(GetArenaForAllocation());
    next_obs_ = p;
  }
  return next_obs_;
}
inline ::gymEnv::Observation* StepResult::mutable_next_obs() {
  ::gymEnv::Observation* _msg = _internal_mutable_next_obs();
  // @@protoc_insertion_point(field_mutable:gymEnv.StepResult.next_obs)
  return _msg;
}
inline void StepResult::set_allocated_next_obs(::gymEnv::Observation* next_obs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete next_obs_;
  }
  if (next_obs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gymEnv::Observation>::GetOwningArena(next_obs);
    if (message_arena != submessage_arena) {
      next_obs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_obs, submessage_arena);
    }
    
  } else {
    
  }
  next_obs_ = next_obs;
  // @@protoc_insertion_point(field_set_allocated:gymEnv.StepResult.next_obs)
}

// float reward = 2;
inline void StepResult::clear_reward() {
  reward_ = 0;
}
inline float StepResult::_internal_reward() const {
  return reward_;
}
inline float StepResult::reward() const {
  // @@protoc_insertion_point(field_get:gymEnv.StepResult.reward)
  return _internal_reward();
}
inline void StepResult::_internal_set_reward(float value) {
  
  reward_ = value;
}
inline void StepResult::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:gymEnv.StepResult.reward)
}

// bool done = 3;
inline void StepResult::clear_done() {
  done_ = false;
}
inline bool StepResult::_internal_done() const {
  return done_;
}
inline bool StepResult::done() const {
  // @@protoc_insertion_point(field_get:gymEnv.StepResult.done)
  return _internal_done();
}
inline void StepResult::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void StepResult::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:gymEnv.StepResult.done)
}

// -------------------------------------------------------------------

// Msg

// string msg = 1;
inline void Msg::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Msg::msg() const {
  // @@protoc_insertion_point(field_get:gymEnv.Msg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gymEnv.Msg.msg)
}
inline std::string* Msg::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:gymEnv.Msg.msg)
  return _s;
}
inline const std::string& Msg::_internal_msg() const {
  return msg_.Get();
}
inline void Msg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg::release_msg() {
  // @@protoc_insertion_point(field_release:gymEnv.Msg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gymEnv.Msg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gymEnv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gymEnv_2eproto
