// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gymEnv.proto
#ifndef GRPC_gymEnv_2eproto__INCLUDED
#define GRPC_gymEnv_2eproto__INCLUDED

#include "gymEnv.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gymEnv {

class GymService final {
 public:
  static constexpr char const* service_full_name() {
    return "gymEnv.GymService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status make(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::EnvSpace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>> Asyncmake(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>>(AsyncmakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>> PrepareAsyncmake(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>>(PrepareAsyncmakeRaw(context, request, cq));
    }
    virtual ::grpc::Status reset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Observation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>> Asyncreset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>> PrepareAsyncreset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>>(PrepareAsyncresetRaw(context, request, cq));
    }
    virtual ::grpc::Status step(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::gymEnv::StepResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>> Asyncstep(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>>(AsyncstepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>> PrepareAsyncstep(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>>(PrepareAsyncstepRaw(context, request, cq));
    }
    virtual ::grpc::Status render(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>> Asyncrender(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>>(AsyncrenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>> PrepareAsyncrender(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>>(PrepareAsyncrenderRaw(context, request, cq));
    }
    virtual ::grpc::Status close(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>> Asyncclose(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>> PrepareAsyncclose(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>>(PrepareAsynccloseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>* AsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::EnvSpace>* PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>* AsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Observation>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>* AsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::StepResult>* PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>* AsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>* AsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gymEnv::Msg>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status make(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::EnvSpace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>> Asyncmake(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>>(AsyncmakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>> PrepareAsyncmake(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>>(PrepareAsyncmakeRaw(context, request, cq));
    }
    ::grpc::Status reset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Observation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>> Asyncreset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>> PrepareAsyncreset(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>>(PrepareAsyncresetRaw(context, request, cq));
    }
    ::grpc::Status step(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::gymEnv::StepResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>> Asyncstep(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>>(AsyncstepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>> PrepareAsyncstep(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>>(PrepareAsyncstepRaw(context, request, cq));
    }
    ::grpc::Status render(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>> Asyncrender(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>>(AsyncrenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>> PrepareAsyncrender(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>>(PrepareAsyncrenderRaw(context, request, cq));
    }
    ::grpc::Status close(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::gymEnv::Msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>> Asyncclose(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>> PrepareAsyncclose(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>>(PrepareAsynccloseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, std::function<void(::grpc::Status)>) override;
      void make(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, std::function<void(::grpc::Status)>) override;
      void reset(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, std::function<void(::grpc::Status)>) override;
      void step(::grpc::ClientContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)>) override;
      void render(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, std::function<void(::grpc::Status)>) override;
      void close(::grpc::ClientContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>* AsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::EnvSpace>* PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>* AsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Observation>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>* AsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::StepResult>* PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::gymEnv::Action& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* AsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* AsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gymEnv::Msg>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::gymEnv::Msg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_make_;
    const ::grpc::internal::RpcMethod rpcmethod_reset_;
    const ::grpc::internal::RpcMethod rpcmethod_step_;
    const ::grpc::internal::RpcMethod rpcmethod_render_;
    const ::grpc::internal::RpcMethod rpcmethod_close_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status make(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response);
    virtual ::grpc::Status reset(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response);
    virtual ::grpc::Status step(::grpc::ServerContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response);
    virtual ::grpc::Status render(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response);
    virtual ::grpc::Status close(::grpc::ServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_make() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake(::grpc::ServerContext* context, ::gymEnv::Msg* request, ::grpc::ServerAsyncResponseWriter< ::gymEnv::EnvSpace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreset(::grpc::ServerContext* context, ::gymEnv::Msg* request, ::grpc::ServerAsyncResponseWriter< ::gymEnv::Observation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_step() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststep(::grpc::ServerContext* context, ::gymEnv::Action* request, ::grpc::ServerAsyncResponseWriter< ::gymEnv::StepResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_render() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrender(::grpc::ServerContext* context, ::gymEnv::Msg* request, ::grpc::ServerAsyncResponseWriter< ::gymEnv::Msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_close() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::gymEnv::Msg* request, ::grpc::ServerAsyncResponseWriter< ::gymEnv::Msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_make<WithAsyncMethod_reset<WithAsyncMethod_step<WithAsyncMethod_render<WithAsyncMethod_close<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_make() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::EnvSpace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::EnvSpace* response) { return this->make(context, request, response); }));}
    void SetMessageAllocatorFor_make(
        ::grpc::MessageAllocator< ::gymEnv::Msg, ::gymEnv::EnvSpace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::EnvSpace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make(
      ::grpc::CallbackServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_reset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Observation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Observation* response) { return this->reset(context, request, response); }));}
    void SetMessageAllocatorFor_reset(
        ::grpc::MessageAllocator< ::gymEnv::Msg, ::gymEnv::Observation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Observation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reset(
      ::grpc::CallbackServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_step() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gymEnv::Action, ::gymEnv::StepResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gymEnv::Action* request, ::gymEnv::StepResult* response) { return this->step(context, request, response); }));}
    void SetMessageAllocatorFor_step(
        ::grpc::MessageAllocator< ::gymEnv::Action, ::gymEnv::StepResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gymEnv::Action, ::gymEnv::StepResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* step(
      ::grpc::CallbackServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_render() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response) { return this->render(context, request, response); }));}
    void SetMessageAllocatorFor_render(
        ::grpc::MessageAllocator< ::gymEnv::Msg, ::gymEnv::Msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* render(
      ::grpc::CallbackServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_close() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gymEnv::Msg* request, ::gymEnv::Msg* response) { return this->close(context, request, response); }));}
    void SetMessageAllocatorFor_close(
        ::grpc::MessageAllocator< ::gymEnv::Msg, ::gymEnv::Msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gymEnv::Msg, ::gymEnv::Msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close(
      ::grpc::CallbackServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_make<WithCallbackMethod_reset<WithCallbackMethod_step<WithCallbackMethod_render<WithCallbackMethod_close<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_make() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_step() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_render() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_close() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_make() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_step() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_render() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrender(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_close() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_make() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->make(context, request, response); }));
    }
    ~WithRawCallbackMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_reset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_step() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->step(context, request, response); }));
    }
    ~WithRawCallbackMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* step(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_render() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->render(context, request, response); }));
    }
    ~WithRawCallbackMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* render(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_close() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->close(context, request, response); }));
    }
    ~WithRawCallbackMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_make() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gymEnv::Msg, ::gymEnv::EnvSpace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gymEnv::Msg, ::gymEnv::EnvSpace>* streamer) {
                       return this->Streamedmake(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::EnvSpace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gymEnv::Msg,::gymEnv::EnvSpace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gymEnv::Msg, ::gymEnv::Observation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gymEnv::Msg, ::gymEnv::Observation>* streamer) {
                       return this->Streamedreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Observation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gymEnv::Msg,::gymEnv::Observation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_step() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gymEnv::Action, ::gymEnv::StepResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gymEnv::Action, ::gymEnv::StepResult>* streamer) {
                       return this->Streamedstep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status step(::grpc::ServerContext* /*context*/, const ::gymEnv::Action* /*request*/, ::gymEnv::StepResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gymEnv::Action,::gymEnv::StepResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_render() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gymEnv::Msg, ::gymEnv::Msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gymEnv::Msg, ::gymEnv::Msg>* streamer) {
                       return this->Streamedrender(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status render(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrender(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gymEnv::Msg,::gymEnv::Msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_close() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gymEnv::Msg, ::gymEnv::Msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gymEnv::Msg, ::gymEnv::Msg>* streamer) {
                       return this->Streamedclose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::gymEnv::Msg* /*request*/, ::gymEnv::Msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gymEnv::Msg,::gymEnv::Msg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_make<WithStreamedUnaryMethod_reset<WithStreamedUnaryMethod_step<WithStreamedUnaryMethod_render<WithStreamedUnaryMethod_close<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_make<WithStreamedUnaryMethod_reset<WithStreamedUnaryMethod_step<WithStreamedUnaryMethod_render<WithStreamedUnaryMethod_close<Service > > > > > StreamedService;
};

}  // namespace gymEnv


#endif  // GRPC_gymEnv_2eproto__INCLUDED
